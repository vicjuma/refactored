yii = function(e) {
    var t = {
        reloadableScripts: [],
        clickableSelector: 'a, button, input[type="submit"], input[type="button"], input[type="reset"], input[type="image"]',
        changeableSelector: "select, input, textarea",
    
        
       
        initModule: function(o) {
            (void 0 === o.isActive || o.isActive) && (e.isFunction(o.init) && o.init(), e.each(o, function() {
                e.isPlainObject(this) && t.initModule(this)
            }))
        },
        init: function() {
            e.ajaxPrefilter(function(e, o, i) {
                    !e.crossDomain && t.getCsrfParam() && i.setRequestHeader("X-CSRF-Token", t.getCsrfToken())
                }), t.refreshCsrfToken(), e(document).ajaxComplete(function(e, t, o) {
                    var i = t && t.getResponseHeader("X-Redirect");
                    i && (window.location = i)
                }),
                function() {
                    var o = location.protocol + "//" + location.host,
                        i = e("script[src]").map(function() {
                            return "/" === this.src.charAt(0) ? o + this.src : this.src
                        }).toArray();
                    e.ajaxPrefilter("script", function(s, n, a) {
                        if ("jsonp" != s.dataType) {
                            var r = "/" === s.url.charAt(0) ? o + s.url : s.url; - 1 === e.inArray(r, i) ? i.push(r) : -1 !== e.inArray(r, e.map(t.reloadableScripts, function(e) {
                                return "/" === e.charAt(0) ? o + e : e
                            })) || a.abort()
                        }
                    }), e(document).ajaxComplete(function(o, i, s) {
                        var n = [];
                        e("link[rel=stylesheet]").each(function() {
                            -1 === e.inArray(this.href, t.reloadableScripts) && (-1 == e.inArray(this.href, n) ? n.push(this.href) : e(this).remove())
                        })
                    })
                }(),
                function() {
                    var o = function(o) {
                        var i = e(this),
                            s = i.data("method"),
                            n = i.data("confirm"),
                            a = i.data("form");
                        return void 0 === s && void 0 === n && void 0 === a || (void 0 !== n ? e.proxy(t.confirm, this)(n, function() {
                            t.handleAction(i, o)
                        }) : t.handleAction(i, o), o.stopImmediatePropagation(), !1)
                    };
                    e(document).on("click.yii", t.clickableSelector, o).on("change.yii", t.changeableSelector, o)
                }()
        }
    };
    return t
}(jQuery), jQuery(document).ready(function() {
    yii.initModule(yii)
});

        function m(t, i) {
            if (!t.hasClass("autocompleter-node")) {
                "string" != typeof(i = e.extend({}, i, t.data("autocompleter-options"))).source || ".json" !== i.source.slice(-5) && !0 !== i.asLocal || e.ajax({
                    url: i.source,
                    type: "GET",
                    dataType: "json",
                    async: !1
                }).done(function(e) {
                    i.source = e
                });
                var s = '<div class="autocompleter ' + i.customClass.join(" ") + '" id="autocompleter-' + (o + 1) + '">';
                i.hint && (s += '<div class="autocompleter-hint"></div>'), s += '<ul class="autocompleter-list"></ul>', s += "</div>", t.addClass("autocompleter-node").after(s);
                var n = t.next(".autocompleter").eq(0),
                    a = t.attr("autocomplete");
                t.attr("autocomplete", "off");
                var r = e.extend({
                    $node: t,
                    $autocompleter: n,
                    $selected: null,
                    $list: null,
                    index: -1,
                    hintText: !1,
                    source: !1,
                    jqxhr: !1,
                    response: null,
                    focused: !1,
                    query: "",
                    originalAutocomplete: a,
                    guid: o++
                }, i);
                r.$autocompleter.on("mousedown.autocompleter", ".autocompleter-item", r, j).data("autocompleter", r), r.$node.on("keyup.autocompleter", r, $).on("keydown.autocompleter", r, k).on("focus.autocompleter", r, b).on("blur.autocompleter", r, T).on("mousedown.autocompleter", r, S)
            }
        }

        function x(e, t) {
            var o = e ? e.data : t;
            !o.$node.prop("disabled") && !o.$autocompleter.hasClass("autocompleter-show") && o.$list && o.$list.length && (o.$autocompleter.removeClass("autocompleter-closed").addClass("autocompleter-show"), c.on("click.autocompleter-" + o.guid, ":not(.autocompleter-item)", o, C))
        }

        function C(t) {
            e(t.target).hasClass("autocompleter-node") || 0 === e(t.currentTarget).parents(".autocompleter").length && A(t)
        }

        function A(e, t) {
            var o = e ? e.data : t;
            o.$autocompleter.hasClass("autocompleter-show") && (o.$autocompleter.removeClass("autocompleter-show").addClass("autocompleter-closed"), c.off(".autocompleter-" + o.guid))
        }

        function j(t) {
            if ("mousedown" !== t.type || -1 === e.inArray(t.which, [2, 3])) {
                var o = t.data;
                t.preventDefault(), t.stopPropagation(), "mousedown" === t.type && e(this).length && (o.$selected = e(this), o.index = o.$list.index(o.$selected)), o.$node.prop("disabled") || (A(t), function(e) {
                    P(e), _(e), w(e)
                }(o), "click" === t.type && o.$node.trigger("focus", [!0]))
            }
        }

        function P(e) {
            e.$selected ? (e.hintText && e.$autocompleter.find(".autocompleter-hint").hasClass("autocompleter-hint-show") && e.$autocompleter.find(".autocompleter-hint").removeClass("autocompleter-hint-show"), e.$node.val(e.$selected.attr("data-value") ? e.$selected.attr("data-value") : e.$selected.attr("data-label"))) : (e.hintText && !e.$autocompleter.find(".autocompleter-hint").hasClass("autocompleter-hint-show") && e.$autocompleter.find(".autocompleter-hint").addClass("autocompleter-hint-show"), e.$node.val(e.query))
        }

        function _(e) {
            e.callback.call(e.$autocompleter, e.$node.val(), e.index, e.response[e.index]), e.$node.trigger("change")
        }

        function O() {
            if (u) return JSON.parse(localStorage.getItem(p) || "{}")
        }

        function M() {
            try {
                localStorage.removeItem(p), D = O()
            } catch (e) {
                throw e
            }
        }
        var D = O();
        e.fn.autocompleter = function(t) {
            return f[t] ? f[t].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof t && t ? this : function(t) {
                t = e.extend({}, h, t || {}), null === c && (c = e("body"));
                for (var o = e(this), i = 0, s = o.length; i < s; i++) m(o.eq(i), t);
                return o
            }.apply(this, arguments)
        }, e.autocompleter = function(e) {
            "defaults" === e ? f.defaults.apply(this, Array.prototype.slice.call(arguments, 1)) : "clearCache" === e && f.clearCache.apply(this, null)
        }
    
