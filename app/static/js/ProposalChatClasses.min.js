function ChatMessage(e) {
    this.messageId = e.messageId, this.selectorReadMark = ".js-read-msg-mark-" + e.messageId, this.opponentClass = "chat__message_type_operator", this.opponentClassAvatar = "chat__avatar_type_operator", this.opponentClassMsg = "chat__text_type_operator", this.userClassMsg = "chat__text_type_user"
}

function ChatProposal(e) {
    this.proposalId = e.proposalId, this.selectorChatCont = ".js-chat-cont-" + e.proposalId, this.selectorChatAttention = ".js-chat-attention-" + e.proposalId, this.selectorNewMark = ".js-message-mark-" + e.proposalId, this.selectorMessageContainer = "#proposal-" + e.proposalId + " .js-proposal-chat-thread", this.selectorTypingStatus = ".js-typing-status-" + e.proposalId, this.selectorInput = ".js-message-chat-input", this.selectorMsgCont = this.selectorMessageContainer + " .js-msg-cont", this.scrollContainer = "#proposal-" + e.proposalId + " .mCSB_container", this.selectorChatContainer = ".js-chat-container"
}

function ProposalGlobalMark() {
    this.pgmElement = $(".js-proposals-global-mark"), this.pgmElementTutor = $("header .js-proposals-global-mark"), this.selectorMsgCounter = ".js-header-msg-count", this.selectorMsgCounterTutor = "header .js-header-msg-count", this.selectorProposalEnd = ".js-proposal-global-end", this.selectorProposalEndTutor = "header .js-proposal-global-end", this.classActive = "my-page__nav-notification_type_link", this.classPasive = "my-page__nav-notification_type_text", this.endProposalElementType1 = '<i class="fa fa-envelope faa-pulse animated"></i>', this.endProposalElementType2 = " messages"
}

function ChatContainer(e) {
    this.proposalId = e.proposalId, this.context = e.context, this.selectorChatCont = ".js-chat-cont-" + e.proposalId, this.chatContObj = $(this.selectorChatCont, this.context), this.selectorChatBlock = ".js-chat-block-" + e.proposalId, this.tdWrap = '<td colspan="8" class="my-page__table-cell_type_no-padding"><td>', this.trWrap = '<tr class="js-common-tr js-new-key-' + parseInt(this.proposalId) + '"></tr>', this.mobileWrap = '<li class="js-new-key-' + parseInt(this.proposalId) + '"></li>'
}

function TableForm(e) {
    this.context = e.context, this.proposalId = e.proposalId, this.formCont = $(".js-form-cont-" + e.proposalId, this.context), this.tdWrap = '<td colspan="8" class="my-page__table-cell_type_no-padding"><td>', this.trWrap = '<tr class="js-common-tr js-new-key-' + parseInt(this.proposalId) + '"></tr>', this.mobileWrap = '<li class="js-new-key-' + parseInt(this.proposalId) + '"></li>', this.selectrorCommonForm = ".js-form-common-" + this.proposalId, this.selectorInputPrice = ".js-input-price", this.selectorFormDescription = ".js-form-description", this.selectorContainerGrid = '.js-common-container-link[data-proposal-id="' + this.proposalId + '"]'
}
ChatMessage.prototype.prepare = function(e, t, s, o, a) {
    e = "" != e ? htmlEncode(e) : "/img/design/no-photo.png", t = htmlEncode(t), s = htmlEncode(s), o = htmlEncode(o);
    var r = '        <div class="chat__message js-msg-cont %%opponent%%" data-is-new="%%isNew%%" data-msg-id="%%messageId%%">            <div class="answer__avatar chat__avatar %%opponentAva%%">                <img data-src="%%fromPhotoUrl%%" width="32" height="32" alt="User"">            </div>            <div class="chat__text %%msgClass%%">                <p>%%message%%</p>                <time class="chat__time">%%createdAt%%<span class="js-read-msg-mark-%%messageId%%" style="display:none">, Read</span></time>            </div>        </div>    ';
    return r = r.replace(/data-src="%%fromPhotoUrl%%"/gm, 'src="' + e + '"').replace(/%%message%%/gm, o).replace(/%%messageId%%/gm, this.messageId), r = a ? (r = (r = (r = (r = r.replace(/%%isNew%%/gm, 1)).replace(/%%opponent%%/gm, "")).replace(/%%opponentAva%%/gm, "")).replace(/%%msgClass%%/gm, this.opponentClassMsg)).replace(/%%createdAt%%/gm, s) : (r = (r = (r = (r = r.replace(/%%isNew%%/gm, 0)).replace(/%%opponent%%/gm, this.opponentClass)).replace(/%%opponentAva%%/gm, this.opponentClassAvatar)).replace(/%%msgClass%%/gm, this.userClassMsg)).replace(/%%createdAt%%/gm, t)
}, ChatMessage.prototype.showReadMark = function() {
    $(this.selectorReadMark).show()
}, ChatProposal.prototype.addMessage = function(e, t) {
    $(this.selectorMessageContainer).append(e), t && (this.hideTypingStatus(), this.isChatHidden() && this.showNewMark())
}, ChatProposal.prototype.showNewMark = function() {
    $(this.selectorNewMark).show()
}, ChatProposal.prototype.hideNewMark = function() {
    $(this.selectorNewMark).hide()
}, ChatProposal.prototype.hideTypingStatus = function() {
    $(this.selectorTypingStatus).hide()
}, ChatProposal.prototype.showTypingStatus = function() {
    $(this.selectorTypingStatus).show()
}, ChatProposal.prototype.isChatHidden = function() {
    var e = $(this.selectorChatCont);
    return !e.length || !e.is(":visible")
}, ChatProposal.prototype.clearInput = function() {
    $(this.selectorInput).val(""), $(this.selectorInput).css("height", 0)
}, ChatProposal.prototype.toggleChatWindow = function() {
    $(this.selectorChatCont).slideToggle(), $(this.selectorChatAttention).toggle()
}, ChatProposal.prototype.scrollToFirstNew = function(e) {
    var t = $(this.scrollContainer),
        s = t.height() - $(this.selectorChatContainer).height();
    if (!e && parseInt(t.css("top")) > -1 * s + 250) return !1;
    var o = 0,
        a = $(this.selectorMsgCont + '[data-is-new="1"]').first();
    if ((o = 0 == a.length ? s : a.position().top) <= 0) return !1;
    t.attr("style", "position: relative; top: -" + o + "px; left: 0px;")
}, ChatProposal.prototype.checkIfChatInBottom = function() {
    var e = $(this.selectorMessageContainer);
    if (0 == e.length) return !1;
    var t = Math.abs(parseInt($(this.scrollContainer).css("top")));
    return e[0].scrollHeight - t <= 300
}, ChatProposal.prototype.markChatMessagesAsRead = function() {
    $(this.selectorMsgCont + '[data-is-new="1"]').each(function(e) {
        $(this).attr("data-is-new", 0)
    })
}, ProposalGlobalMark.prototype.setMessageCount = function(e) {
    var t = $(this.selectorMsgCounter),
        s = $(this.selectorMsgCounterTutor);
    e <= 0 ? this.showNoMessage(t, s) : this.showWithMessage(t, e)
}, ProposalGlobalMark.prototype.addMsgCounter = function() {
    var e = $(this.selectorMsgCounter),
        t = e.html();
    t++, this.showWithMessage(e, t)
}, ProposalGlobalMark.prototype.showWithMessage = function(e, t) {
    var s = $(this.selectorProposalEnd);
    this.pgmElementTutor.removeClass(this.classPasive), this.pgmElement.addClass(this.classActive), e.text(t), s.html(this.endProposalElementType1)
}, ProposalGlobalMark.prototype.showNoMessage = function(e, t) {
    t && (t = $());
    var s = $(this.selectorProposalEnd),
        o = $(this.selectorProposalEndTutor);
    this.pgmElementTutor.removeClass(this.classActive), this.pgmElementTutor.addClass(this.classPasive), e.text(""), t.text("0"), s.html(""), o.html(this.endProposalElementType2)
}, ChatContainer.prototype.open = function(e, t) {
    return t ? this.chatContObj.insertAfter(e).wrap(this.mobileWrap) : this.chatContObj.insertAfter(e).wrap(this.trWrap).wrap(this.tdWrap), this.chatContObj.data("open", 1), this.chatContObj.slideDown(), !0
}, ChatContainer.prototype.close = function(e) {
    var t = this;
    return this.chatContObj.slideUp(300, function() {
        t.chatContObj.data("open", 0), t.chatContObj.appendTo($(t.selectorChatBlock, t.context)), e.remove()
    }), !0
}, ChatContainer.prototype.isOpen = function() {
    return this.chatContObj.data("open")
}, TableForm.prototype.isOpen = function() {
    return this.formCont.data("open")
}, TableForm.prototype.setPrice = function(e) {
    return $(this.selectorInputPrice, this.selectrorCommonForm).attr("value", e)
}, TableForm.prototype.setDescription = function(e) {
    return $(this.selectorFormDescription, this.selectrorCommonForm).text(e)
}, TableForm.prototype.open = function(e, t) {
    t ? this.formCont.insertAfter(e).wrap(this.mobileWrap) : this.formCont.insertAfter(e).wrap(this.trWrap).wrap(this.tdWrap);
    var s = $("textarea", $(this.formCont));
    if ("answer" == s.data("type")) {
        var o = s.attr("id");
        CKEDITOR.replace(o, {
            removeButtons: "Superscript,Subscript,Anchor",
            coreStyles_bold: {
                element: "b",
                overrides: "strong"
            },
            coreStyles_italic: {
                element: "i",
                overrides: "em"
            },
            linkShowAdvancedTab: !1,
            linkShowTargetTab: !1,
            plugins: "mathjax,basicstyles,resize,toolbar,wysiwygarea,link,list",
            mathJaxClass: "my-math",
            mathJaxLib: "//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML",
            toolbarGroups: [{
                name: "basicstyles",
                groups: ["basicstyles"]
            }, {
                name: "paragraph",
                groups: ["list"]
            }, {
                name: "links"
            }, {
                name: "insert"
            }],
            language: "en"
        })
    }
    return this.formCont.data("open", 1), this.formCont.slideDown(), !0
}, TableForm.prototype.close = function(e) {
    var t = this;
    return this.formCont.slideUp(300, function() {
        var s = $("textarea", $(t.formCont));
        if ("answer" == s.data("type")) {
            var o = s.attr("id"),
                a = CKEDITOR.instances[o];
            a && a.destroy()
        }
        t.formCont.insertAfter($(t.selectorContainerGrid, t.context)), $("form", t.formCont)[0].reset(), t.formCont.data("open", 0), e.remove()
    }), !0
};
var PageElementChangerInterface = {
    renderChatMessage: function(e, t, s, o, a, r, n, i, l) {},
    renderMessageTyping: function(e) {},
    renderProposal: function(e, t) {},
    updateMessage: function(e) {},
    reloadProposal: function(e, t) {}
};

function QuestionPageElementChanger() {
    this.prevTimeoutId = !1, this.pgm = new ProposalGlobalMark, this.selectorWaitingChat = ".js-waiting-chat", this.selectorProposalList = ".js-proposal-list", this.selectorOnlineMark = ".js-online-mark-", this.selectorUserOpponent = ".js-user-opponent", this.selectorProposalStatus = ".js-proposal-status", this.offlineClass = "chat__button_state_offline"
}

function ProposalElementChanger() {
    this.pgm = new ProposalGlobalMark, this.selectorNewProposalMsgMark = ".js-new-proposal-msg-mark-", this.selectorNewQuestionMsgMark = ".js-new-question-msg-mark-", this.prevTimeoutId = !1
}

function GlobalElementChanger() {
    this.pgm = new ProposalGlobalMark
}

function ChatSocket(e) {
    this.webSocketUrl = e.webSocketUrl, this.userId = e.userId, this.questionId = e.questionId, this.userRequest = e.userRequest, this.domElementChanger = e.domElementChanger, this.socket = !1, this.isCheckOnline = e.isCheckOnline, this.connect()
}

function ChatActions(e) {
    this.domElementChanger = e.domElementChanger, this.chatSocket = e.chatSocket, this.selectorChatBtn = ".js-chat-proposal", this.selectorChatForm = ".js-chat-form", this.selectorChatOneForm = "#mf", this.selectorControlLink = ".js-control-link", this.selectorOpenChatLink = ".js-prop-open-chat", this.selectorNew = ".js-new-key-", this.selectorInputPrice = ".js-input-price", this.selectorFormDescription = ".js-form-description", this.selectorGridId = ".js-tabs-item", this.selectorDataPriceCell = ".js-data-price-", this.selectorChatInput = ".js-message-chat-input", this.selectorSendBtn = ".js-chat-send-btn", this.selectorTab = ".js-tab", this.selectorhideChatBtn = ".js-hide-chat-eye", this.selectorToogleIcon = ".js-table-toggler-icon-", this.selectorSwwLess = ".js-sww-less", this.selectorProposalContent = ".js-proposal-content", this.selectorCancelBtn = ".js-cancel-form-btn"
}
QuestionPageElementChanger.prototype = Object.create(PageElementChangerInterface), QuestionPageElementChanger.prototype.renderChatMessage = function(e, t, s, o, a, r, n, i, l) {
    t = new ChatMessage({
        messageId: n
    }).prepare(e, s, o, t, i);
    var p = new ChatProposal({
            proposalId: a
        }),
        c = p.checkIfChatInBottom();
    return p.addMessage(t, i), i ? p.isChatHidden() ? this.pgm.addMsgCounter() : (c && p.scrollToFirstNew(!1), this.msgReadResponse(a, l)) : p.scrollToFirstNew(!1), !0
}, QuestionPageElementChanger.prototype.renderProposal = function(e, t) {
    var s = this;
    return $.ajax({
        url: "/question/ajax-load-proposal",
        dataType: "html",
        type: "POST",
        cache: !1,
        data: {
            proposalId: e,
            questionId: t
        },
        success: function(e) {
            $(s.selectorWaitingChat).remove();
            var t = $(s.selectorProposalList);
            t.show(), t.append(e), $(".js-chat-container").mCustomScrollbar({
                setTop: "-100%"
            }), $(".js-message-chat-input").textareaAutoSize()
        }
    }), !0
}, QuestionPageElementChanger.prototype.reloadProposal = function(e, t) {
    var s = this;
    return $.ajax({
        url: "/question/ajax-load-proposal",
        dataType: "html",
        type: "POST",
        cache: !1,
        data: {
            proposalId: e,
            questionId: t
        },
        success: function(t) {
            $("#proposal-" + e).replaceWith($(t)), $(".js-chat-container").mCustomScrollbar({
                setTop: "-100%"
            }), $(".js-message-chat-input").textareaAutoSize()
        }
    }), $.ajax({
        url: "/question/ajax-reload-proposal-status",
        dataType: "html",
        type: "POST",
        cache: !1,
        data: {
            proposalId: e
        },
        success: function(e) {
            $(s.selectorProposalStatus).html(e)
        }
    }), !0
}, QuestionPageElementChanger.prototype.clearChatInput = function(e) {
    new ChatProposal({
        proposalId: e
    }).clearInput()
}, QuestionPageElementChanger.prototype.clearMarks = function(e, t) {
    var s = new ChatProposal({
        proposalId: e
    });
    s.hideNewMark(), s.markChatMessagesAsRead(), this.pgm.setMessageCount(t), 0 == t && this.pgm.setMessageCount(0)
}, QuestionPageElementChanger.prototype.updateMessage = function(e) {
    $.each(e, function(e, t) {
        new ChatMessage({
            messageId: t
        }).showReadMark()
    })
}, QuestionPageElementChanger.prototype.msgReadResponse = function(e, t, s) {
    s = s || this, "blur" != $(window).data("state") && $.ajax({
        url: "/question/ajax-mark-read-message",
        dataType: "json",
        type: "POST",
        cache: !1,
        data: {
            proposalId: e
        },
        success: function(o) {
            o.success && (s.clearMarks(e, o.notReadMsg), o.isSendReadStatus && t.sendReadMsgs(o.fromUserId, o.toUserId, o.messagesId))
        }
    })
}, QuestionPageElementChanger.prototype.renderMessageTyping = function(e) {
    var t = new ChatProposal({
        proposalId: e
    });
    return t.showTypingStatus(), new ChatProposal({
        proposalId: e
    }).scrollToFirstNew(!1), this.prevTimeoutId && clearTimeout(this.prevTimeoutId), this.prevTimeoutId = setTimeout(function() {
        t.hideTypingStatus()
    }, 1e4), this.prevTimeoutId
}, QuestionPageElementChanger.prototype.checkOnline = function(e) {
    for (var t = e.length, s = 0; s < t; s++) e[s].isOnline ? $(this.selectorOnlineMark + e[s].userId).removeClass(this.offlineClass) : $(this.selectorOnlineMark + e[s].userId).addClass(this.offlineClass)
}, QuestionPageElementChanger.prototype.getProposalUsers = function() {
    var e = $(this.selectorUserOpponent),
        t = [],
        s = 0;
    return e.each(function() {
        t[s] = $(this).data("user-id"), s++
    }), t
}, ProposalElementChanger.prototype = Object.create(PageElementChangerInterface), ProposalElementChanger.prototype.renderChatMessage = function(e, t, s, o, a, r, n, i, l) {
    (new QuestionPageElementChanger).renderChatMessage(e, t, s, o, a, r, n, i, l);
    var p = new ChatProposal({
        proposalId: a
    });
    return i && (p.isChatHidden() ? ($(this.selectorNewProposalMsgMark + a).html('<i class="fa fa-envelope faa-pulse animated my-page__animated-envelopment"></i></span>'), $(this.selectorNewQuestionMsgMark + r).html('<i class="fa fa-envelope faa-pulse animated my-page__animated-envelopment"></i></span>')) : $(this.selectorNewProposalMsgMark + a).html('<i class="fa fa-envelope-o faa-pulse my-page__animated-envelopment"></i></span>')), !0
}, ProposalElementChanger.prototype.msgReadResponse = function(e, t) {
    (new QuestionPageElementChanger).msgReadResponse(e, t, this)
}, ProposalElementChanger.prototype.clearMarks = function(e, t) {
    new ChatProposal({
        proposalId: e
    }).markChatMessagesAsRead(), $(this.selectorNewProposalMsgMark + e).html('<i class="fa fa-envelope-o faa-pulse my-page__animated-envelopment"></i></span>'), 0 == t && this.pgm.setMessageCount(0)
}, ProposalElementChanger.prototype.clearChatInput = function(e) {
    (new QuestionPageElementChanger).clearChatInput(e)
}, ProposalElementChanger.prototype.renderMessageTyping = function(e) {
    var t = new QuestionPageElementChanger;
    t.prevTimeoutId = this.prevTimeoutId, this.prevTimeoutId = t.renderMessageTyping(e)
}, ProposalElementChanger.prototype.updateMessage = function(e) {
    (new QuestionPageElementChanger).updateMessage(e)
}, GlobalElementChanger.prototype = Object.create(PageElementChangerInterface), GlobalElementChanger.prototype.renderChatMessage = function(e, t, s, o, a, r, n, i, l) {
    this.pgm.addMsgCounter()
}, ChatSocket.prototype.connect = function() {
    var e = this;
    if (!window.WebSocket) throw new Error("Sockets not supported");
    this.socket = new WebSocket(this.webSocketUrl);
    var t = this.userId,
        s = this.domElementChanger;
    this.socket.onopen = function() {
        if (this.send(JSON.stringify({
                type: "hello",
                userId: t,
                userRequest: e.userRequest
            })), e.isCheckOnline) {
            var o = s.getProposalUsers();
            e.checkOnline(o), setInterval(function() {
                var t = s.getProposalUsers();
                e.checkOnline(t)
            }, 3e4)
        }
    }, this.socket.onmessage = function(t) {
        var o = JSON.parse(t.data);
        switch (o.type) {
            case "proposalMessage":
                s.renderChatMessage(o.fromPhotoUrl, o.message, o.createdAt, o.createdAtOpponent, o.proposalId, o.questionId, o.messageId, o.renderNewMark, e);
                break;
            case "newProposal":
                s.renderProposal(o.proposalId, e.questionId);
                break;
            case "messageRead":
                s.updateMessage(o.messagesId);
                break;
            case "messageTyping":
                s.renderMessageTyping(o.proposalId);
                break;
            case "checkOnline":
                s.checkOnline(o.checkedUsers);
                break;
            case "proposalChange":
                s.reloadProposal(o.proposalId, e.questionId)
        }
    }
}, ChatSocket.prototype.sendChatMsg = function(e, t, s, o, a, r, n, i, l) {
    this.socket.send(JSON.stringify({
        type: "proposalMessage",
        fromUserId: e,
        fromPhotoUrl: t,
        toUserId: s,
        createdAt: o,
        createdAtOpponent: a,
        message: r,
        proposalId: n,
        questionId: i,
        messageId: l,
        renderNewMark: !0
    }))
}, ChatSocket.prototype.sendReadMsgs = function(e, t, s) {
    this.socket.send(JSON.stringify({
        type: "messageRead",
        fromUserId: e,
        toUserId: t,
        messagesId: s
    }))
}, ChatSocket.prototype.sendMessageTyping = function(e, t, s) {
    this.socket.send(JSON.stringify({
        type: "messageTyping",
        fromUserId: e,
        toUserId: t,
        proposalId: s
    }))
}, ChatSocket.prototype.checkOnline = function(e) {
    this.socket.send(JSON.stringify({
        type: "checkOnline",
        fromUserId: this.userId,
        users: e
    }))
}, ChatActions.prototype.registerChatBtnAction = function() {
    var e = this.domElementChanger,
        t = this.chatSocket,
        s = this;
    $(document).on("click", this.selectorChatBtn, function() {
        $(".js-answer-block").slideUp();
        var s = $(this).data("proposal-id"),
            o = new ChatProposal({
                proposalId: s
            });
        o.toggleChatWindow(), o.isChatHidden() || (o.hideNewMark(), o.scrollToFirstNew(!0), e.msgReadResponse(s, t))
    }), $(document).on("click", this.selectorSwwLess, function() {
        $(s.selectorProposalContent).toggleClass("box-hide"), $(this).text("See less" == $(this).text() ? "See more" : "See less")
    }), $(document).on("click", ".js-edit-proposal", function() {
        $(".js-answer-block").slideDown(), $(".js-control-btn").slideUp(), $(".js-chat-block").slideUp()
    }), $(document).on("click", this.selectorCancelBtn, function() {
        $(".js-answer-block").slideUp(), $(".js-control-btn").slideDown(), $(".js-chat-block").slideDown(), $(".js-btn-panel").slideDown(), $(".js-answer-div").slideUp(), $(".js-proposal-div").slideUp()
    }), $(document).on("click", ".js-post-answer", function() {
        $(".js-answer-block").slideDown(), $(".js-control-btn").slideUp(), $(".js-chat-block").slideUp()
    }), $(document).on("click", ".js-edit-answer", function() {
        $(".js-answer-block").slideToggle(), $(".js-chat-block").slideUp()
    }), $(document).on("click", ".js-handshake", function() {
        $(".js-btn-panel").slideUp(), $(".js-proposal-div").slideDown(), $(".js-answer-div").hide()
    }), $(document).on("click", ".js-answer", function() {
        $(".js-btn-panel").slideUp(), $(".js-answer-div").slideDown(), $(".js-proposal-div").hide()
    }), $(document).on("removeFile", "body", function(e, t, s, o, a, r) {
        if (r) return !1;
        var n = $("#filechanger-" + s),
            i = n.val();
        if (i)(i = JSON.parse(i)).push(t), n.val(JSON.stringify(i));
        else {
            var l = [t];
            n.val(JSON.stringify(l))
        }
    }), $(document).on("click", ".js-spam-link", function() {
        showModal($(".js-modal"))
    })
}, ChatActions.prototype.registerSendMsgAction = function() {
    var e = this;
    $(document).on("click", this.selectorSendBtn, function() {
        $(e.selectorChatOneForm + $(this).data("model-id")).submit()
    }), $(document).on("keydown", this.selectorChatInput, function(t) {
        13 == t.keyCode && (t.preventDefault(), $(e.selectorChatOneForm + $(this).data("model-id")).submit())
    })
}, ChatActions.prototype.registerSubmitFormAction = function() {
    var e = this.domElementChanger,
        t = this.chatSocket,
        s = this.selectorChatInput;
    $(document).on("submit", this.selectorChatForm, function() {
        var o = $(this),
            a = $(s, this);
        return $.trim(a.val()).length < 2 ? (a.val(""), !1) : ($.ajax({
            url: "/question/ajax-add-proposal-message",
            dataType: "json",
            type: "POST",
            cache: !1,
            data: o.serialize(),
            success: function(s) {
                s.success ? (e.clearChatInput(s.data.proposalId), e.renderChatMessage(s.data.fromPhotoUrl, s.data.message, s.data.createdAt, s.data.createdAtOpponent, s.data.proposalId, s.data.questionId, s.data.messageId, !1, t), t.sendChatMsg(s.data.fromUserId, s.data.fromPhotoUrl, s.data.toUserId, s.data.createdAt, s.data.createdAtOpponent, s.data.message, s.data.proposalId, s.data.questionId, s.data.messageId)) : s.redirect && location.reload()
            }
        }), !1)
    })
}, ChatActions.prototype.registerMessageTypeAction = function() {
    var e = this.chatSocket,
        t = !0;
    $(document).on("keyup", this.selectorChatInput, function() {
        var s = $(this).data("proposal-id"),
            o = $(this).data("from-user-id"),
            a = $(this).data("to-user-id");
        t && (t = !1, e.sendMessageTyping(o, a, s), setTimeout(function() {
            t = !0
        }, 8e3))
    })
}, ChatActions.prototype.run = function() {
    this.registerChatBtnAction(), this.registerSubmitFormAction(), this.registerMessageTypeAction(), this.registerSendMsgAction()
}, ChatActions.prototype.registerControlBtnActions = function() {
    var e = this,
        t = 0,
        s = 0,
        o = "#tab1";

    function a(o) {
        t && (new TableForm({
            proposalId: t,
            context: o
        }).close($(e.selectorNew + t, o)), $(e.selectorToogleIcon + t, o).hide(), t = 0);
        s && (new ChatContainer({
            proposalId: s,
            context: o
        }).close($(e.selectorNew + s, o)), s = 0)
    }
    $(document).on("click", this.selectorControlLink, function() {
        var o = $(this).data("proposal-id"),
            r = $(this).data("is-mobile"),
            n = r ? $(this).closest("ul").parent() : $(this).closest("table").parent(),
            i = $(e.selectorNew + o, n),
            l = new TableForm({
                proposalId: o,
                context: n
            }),
            p = new ChatContainer({
                proposalId: o,
                context: n
            });
        if (l.isOpen()) l.close(i), $(e.selectorToogleIcon + o, n).hide(), t = 0;
        else {
            p.isOpen() && (p.close(i), s = 0), a(n);
            var c = r ? $(this).closest("li") : $(this).closest("tr");
            l.open(c, r), t = o, $(e.selectorToogleIcon + o, n).show()
        }
    }), $(document).on("click", this.selectorOpenChatLink, function() {
        var o = $(this).data("proposal-id"),
            r = $(this).data("is-mobile"),
            n = r ? $(this).closest("ul").parent() : $(this).closest("table").parent(),
            i = $(e.selectorNew + o, n),
            l = new ChatContainer({
                proposalId: o,
                context: n
            }),
            p = new TableForm({
                proposalId: o,
                context: n
            }),
            c = e.domElementChanger,
            h = e.chatSocket,
            d = new ChatProposal({
                proposalId: o
            });
        if (l.isOpen()) l.close(i), s = 0;
        else {
            p.isOpen() && (p.close(i), $(e.selectorToogleIcon + o, n).hide(), t = 0), a(n);
            var m = r ? $(this).closest("li") : $(this).closest("tr");
            l.open(m, r), s = o, d.scrollToFirstNew(!0), c.msgReadResponse(o, h)
        }
    }), $(document).on("click", this.selectorhideChatBtn, function() {
        var t = $(this).data("proposal-id"),
            s = $(this).closest("table").length > 0 ? $(this).closest("table").parent() : $(this).closest("ul").parent();
        new ChatContainer({
            proposalId: t,
            context: s
        }).close($(e.selectorNew + t, s))
    }), $(document).on("click", this.selectorCancelBtn, function() {
        var t = $(this).data("proposal-id");
        $(e.selectorControlLink + '[data-proposal-id="' + t + '"]').trigger("click")
    }), $(document).on("click", this.selectorTab, function() {
        a($(o)), o = $(this).attr("href")
    })
}, ChatActions.prototype.registerFormActions = function(e, t) {
    var s = this;
    $(document).on("beforeSubmit", this.selectorGridId + " " + e, function() {
        var e = $(this),
            o = $(this).closest("table").length > 0 ? $(this).closest("table").parent() : $(this).closest("ul").parent(),
            a = new TableForm({
                proposalId: e.data("proposal-id"),
                context: o
            });
        return $.ajax({
            url: t,
            dataType: "json",
            type: "POST",
            cache: !1,
            data: e.serialize(),
            success: function(t) {
                var r = e.data("proposal-id");
                if (t.success) {
                    var n = $(s.selectorInputPrice, e).val(),
                        i = $(s.selectorFormDescription, e).val();
                    $(s.selectorDataPriceCell + r).text("$" + n), a.setPrice(n), a.setDescription(i)
                }
                a.close($(s.selectorNew + r, o)), $("button[type=submit]", e).attr("disabled", !1), $(s.selectorToogleIcon + r, o).hide()
            }
        }), !1
    })
}, ChatActions.prototype.runProposal = function() {
    this.registerControlBtnActions(), this.registerFormActions(".proposal-form", "/question/ajax-proposal-update"), this.registerFormActions(".answer-form", "/question/ajax-answer-update"), this.registerSendMsgAction(), this.registerSubmitFormAction(), this.registerMessageTypeAction()
};